/**
 * This class is generated by jOOQ
 */
package com.timostaudinger.dailydose.model.generated.tables;


import com.timostaudinger.dailydose.model.generated.Dailydose;
import com.timostaudinger.dailydose.model.generated.Keys;
import com.timostaudinger.dailydose.model.generated.tables.records.TokenRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.6.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Token extends TableImpl<TokenRecord> {

    /**
     * The reference instance of <code>dailydose.token</code>
     */
    public static final Token TOKEN = new Token();
    private static final long serialVersionUID = 953076791;
    /**
     * The column <code>dailydose.token.uuid</code>.
     */
    public final TableField<TokenRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");
    /**
     * The column <code>dailydose.token.used</code>.
     */
    public final TableField<TokenRecord, Boolean> USED = createField("used", org.jooq.impl.SQLDataType.BIT, this, "");
    /**
     * The column <code>dailydose.token.created_on</code>.
     */
    public final TableField<TokenRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");
    /**
     * The column <code>dailydose.token.changed_on</code>.
     */
    public final TableField<TokenRecord, Timestamp> CHANGED_ON = createField("changed_on", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");
    /**
     * The column <code>dailydose.token.user_id</code>.
     */
    public final TableField<TokenRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>dailydose.token</code> table reference
     */
    public Token() {
        this("token", null);
    }

    /**
     * Create an aliased <code>dailydose.token</code> table reference
     */
    public Token(String alias) {
        this(alias, TOKEN);
    }

    private Token(String alias, Table<TokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Token(String alias, Table<TokenRecord> aliased, Field<?>[] parameters) {
        super(alias, Dailydose.DAILYDOSE, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenRecord> getRecordType() {
        return TokenRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TokenRecord> getPrimaryKey() {
        return Keys.KEY_TOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TokenRecord>> getKeys() {
        return Arrays.<UniqueKey<TokenRecord>>asList(Keys.KEY_TOKEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TokenRecord, ?>>asList(Keys.FK_G7IM3J7F0G31YHL6QCO2IBOY5);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Token as(String alias) {
        return new Token(alias, this);
    }

    /**
     * Rename this table
     */
    public Token rename(String name) {
        return new Token(name, null);
    }
}
